diff --git a/node_modules/@exadel/compreface-js-sdk/compreface.d.ts b/node_modules/@exadel/compreface-js-sdk/compreface.d.ts
index 8651602..527893f 100644
--- a/node_modules/@exadel/compreface-js-sdk/compreface.d.ts
+++ b/node_modules/@exadel/compreface-js-sdk/compreface.d.ts
@@ -25,7 +25,7 @@ declare interface FaceCollectionAddOptions {
     det_prob_threshold: string
 }
 
-declare interface ServiceOptions{
+declare interface ServiceOptions {
     limit: number,
     face_plugins?: string,
     det_prob_threshold?: number,
diff --git a/node_modules/@exadel/compreface-js-sdk/endpoints/common_endpoints.js b/node_modules/@exadel/compreface-js-sdk/endpoints/common_endpoints.js
index 782957d..db26b40 100644
--- a/node_modules/@exadel/compreface-js-sdk/endpoints/common_endpoints.js
+++ b/node_modules/@exadel/compreface-js-sdk/endpoints/common_endpoints.js
@@ -25,17 +25,18 @@ const common_endpoints = {
      * @param {String} api_key 
      * @returns {Promise}
      */
-    async upload_base64(base64string, url, api_key){
+    async upload_base64(base64string, url, api_key) {
         let data = {
             file: base64string
         }
 
-        return new Promise( async (resolve, reject) => {
+        return new Promise(async (resolve, reject) => {
             try {
-                const response = await axios.post( url, JSON.stringify(data), {
+                const response = await axios.post(url, JSON.stringify(data), {
                     headers: {
                         'Content-Type': 'application/json',
-                        "x-api-key": api_key
+                        "x-api-key": api_key,
+                        "deviceId": api_key,
                     },
                 })
 
@@ -52,16 +53,17 @@ const common_endpoints = {
      * @param {String} api_key 
      * @returns {Promise}
      */
-    async upload_blob(blobData, url, api_key){
+    async upload_blob(blobData, url, api_key) {
         var bodyFormData = new FormData();
         bodyFormData.append('file', blobData, 'example.jpg');
 
-        return new Promise( async (resolve, reject) => {
+        return new Promise(async (resolve, reject) => {
             try {
-                const response = await axios.post( url, bodyFormData, {
+                const response = await axios.post(url, bodyFormData, {
                     headers: {
                         'Content-Type': 'multipart/form-data',
-                        "x-api-key": api_key
+                        "x-api-key": api_key,
+                        "deviceId": api_key,
                     },
                 })
 
@@ -79,17 +81,18 @@ const common_endpoints = {
      * @param {String} api_key 
      * @returns {Promise}
      */
-     async upload_path(image_path, url, api_key ){
+    async upload_path(image_path, url, api_key) {
         var bodyFormData = new FormData();
         bodyFormData.append('file', fs.createReadStream(image_path), { knownLength: fs.statSync(image_path).size });
 
-        return new Promise( async (resolve, reject) => {
+        return new Promise(async (resolve, reject) => {
             try {
-                const response = await axios.post( url, bodyFormData, {
+                const response = await axios.post(url, bodyFormData, {
                     headers: {
                         ...bodyFormData.getHeaders(),
                         "Content-Length": bodyFormData.getLengthSync(),
-                        "x-api-key": api_key
+                        "x-api-key": api_key,
+                        "deviceId": api_key,
                     },
                 })
 
@@ -107,19 +110,20 @@ const common_endpoints = {
      * @param {String} api_key 
      * @returns {Promise}
      */
-    async upload_url(image_url, url, api_key){
+    async upload_url(image_url, url, api_key) {
         var bodyFormData = new FormData();
 
-        return new Promise( async (resolve, reject) => {
+        return new Promise(async (resolve, reject) => {
             await axios.get(image_url, { responseType: 'stream' })
-                .then( async (response) => {
+                .then(async (response) => {
                     let image_extention = response.headers['content-type'].split("/")[1]
                     bodyFormData.append('file', response.data, `example.${image_extention}`);
                     try {
-                        const res = await axios.post( url, bodyFormData, {
+                        const res = await axios.post(url, bodyFormData, {
                             headers: {
                                 ...bodyFormData.getHeaders(),
-                                "x-api-key": api_key
+                                "x-api-key": api_key,
+                                "deviceId": api_key,
                             },
                         })
 
diff --git a/node_modules/@exadel/compreface-js-sdk/endpoints/upload.js b/node_modules/@exadel/compreface-js-sdk/endpoints/upload.js
index 1400d04..b2d61eb 100644
--- a/node_modules/@exadel/compreface-js-sdk/endpoints/upload.js
+++ b/node_modules/@exadel/compreface-js-sdk/endpoints/upload.js
@@ -2,48 +2,48 @@ import { common_functions } from '../functions/index.js';
 import { common_endpoints } from '../endpoints/common_endpoints.js';
 
 const upload = (image_data, url, api_key) => {
-    const{ isUrl, isPathRelative, isBase64 } = common_functions;
+    const { isUrl, isPathRelative, isBase64 } = common_functions;
     const { upload_blob, upload_path, upload_url, upload_base64 } = common_endpoints;
 
     let imageFromUrl = isUrl(image_data),
         imageFromPath = isPathRelative(image_data),
         imageFromBase64 = isBase64(image_data);
 
-        return new Promise((resolve, reject) => {
-            if(imageFromUrl){
-                upload_url(image_data, url, api_key)
-                    .then(response => {
-                        resolve(response.data)
-                    })
-                    .catch(error => {
-                        reject(error)
-                    })
-            }else if(imageFromBase64){
-                upload_base64(image_data, url, api_key)
-                    .then(response => {
-                        resolve(response.data)
-                    })
-                    .catch(error => {
-                        reject(error)
-                    })
-            }else if(imageFromPath){
-                upload_path(image_data, url, api_key)
-                    .then(response => {
-                        resolve(response.data)
-                    })
-                    .catch(error => {
-                        reject(error)
-                    })
-            }else {
-                upload_blob(image_data, url, api_key)
-                    .then(response => {
-                        resolve(response.data)
-                    })
-                    .catch(error => {
-                        reject(error)
-                    })
-            }
-        })
+    return new Promise((resolve, reject) => {
+        if (imageFromUrl) {
+            upload_url(image_data, url, api_key)
+                .then(response => {
+                    resolve(response.data)
+                })
+                .catch(error => {
+                    reject(error)
+                })
+        } else if (imageFromBase64) {
+            upload_base64(image_data, url, api_key)
+                .then(response => {
+                    resolve(response.data)
+                })
+                .catch(error => {
+                    reject(error)
+                })
+        } else if (imageFromPath) {
+            upload_path(image_data, url, api_key)
+                .then(response => {
+                    resolve(response.data)
+                })
+                .catch(error => {
+                    reject(error)
+                })
+        } else {
+            upload_blob(image_data, url, api_key)
+                .then(response => {
+                    resolve(response.data)
+                })
+                .catch(error => {
+                    reject(error)
+                })
+        }
+    })
 }
 
 export { upload };
\ No newline at end of file
diff --git a/node_modules/@exadel/compreface-js-sdk/services/recognition_service.js b/node_modules/@exadel/compreface-js-sdk/services/recognition_service.js
index 57a753c..8108b8d 100644
--- a/node_modules/@exadel/compreface-js-sdk/services/recognition_service.js
+++ b/node_modules/@exadel/compreface-js-sdk/services/recognition_service.js
@@ -19,7 +19,7 @@ import { subject_endpoints } from '../endpoints/subject_endpoints.js';
 import { upload } from '../endpoints/upload.js';
 
 class RecognitionService {
-    constructor(server, port, options, key){
+    constructor(server, port, options, key) {
         this.server = server;
         this.port = port;
         this.options = options;
@@ -33,8 +33,8 @@ class RecognitionService {
      * @param {String} image_path 
      * @returns {Promise}
      */
-    recognize(image_path, options){
-        const{ get_full_url, add_options_to_url, isUrl, isPathRelative } = common_functions;
+    recognize(image_path, options) {
+        const { get_full_url, add_options_to_url, isUrl, isPathRelative } = common_functions;
         // add_options_to_url() adds this parameter to url if user passes some value as option otherwise function ignores this parameter
         let required_url_parameters = {
             limit: true,
@@ -44,9 +44,9 @@ class RecognitionService {
             status: true
         };
 
-		if (!options.limit) {
-			options = { ...options, limit: 0 };
-		}
+        if (!options.limit) {
+            options = { ...options, limit: 0 };
+        }
 
         // add parameters to basic url
         let full_url = get_full_url(this.recognize_base_url, this.server, this.port)
@@ -68,8 +68,8 @@ class RecognitionService {
      * Contains functions related to face collection
      * @returns {Object}
      */
-    getFaceCollection(){
-        const{ get_full_url, add_options_to_url, isUrl, isPathRelative } = common_functions;
+    getFaceCollection() {
+        const { get_full_url, add_options_to_url, isUrl, isPathRelative } = common_functions;
 
         let url = get_full_url(this.base_url, this.server, this.port)
         let key = this.key;
@@ -80,7 +80,7 @@ class RecognitionService {
              * View the list of images in face collection
              * @returns {Promise}
              */
-            list(){
+            list() {
                 return new Promise((resolve, reject) => {
                     recognition_endpoints.list_request(url, key)
                         .then(response => {
@@ -98,7 +98,7 @@ class RecognitionService {
              * @param {String} subject 
              * @returns {Promise} 
              */
-            add(image_path, subject, options){
+            add(image_path, subject, options) {
                 // add_options_to_url() adds this parameter to url if user passes some value as option otherwise function ignores this parameter
                 let required_url_parameters = { det_prob_threshold: true };
 
@@ -124,7 +124,7 @@ class RecognitionService {
              * @param {String} image_id 
              * @returns {Promise}
              */
-            verify(image_path, image_id, options){
+            verify(image_path, image_id, options) {
                 // add_options_to_url() adds this parameter to url if user passes some value as option otherwise function ignores this parameter
                 let required_url_parameters = {
                     limit: true,
@@ -152,7 +152,7 @@ class RecognitionService {
              * @param {String} image_id 
              * @returns {Promise}
              */
-            delete(image_id){
+            delete(image_id) {
                 url = `${url}/${image_id}`;
 
                 return new Promise((resolve, reject) => {
@@ -167,30 +167,30 @@ class RecognitionService {
             },
 
             /**
-			 * Delete multiple images
-			 * @param {String[]} image_ids
-			 * @returns {Promise}
-			 */
-			delete_multiple_images(image_ids) {
-				url = `${url}/delete`;
+             * Delete multiple images
+             * @param {String[]} image_ids
+             * @returns {Promise}
+             */
+            delete_multiple_images(image_ids) {
+                url = `${url}/delete`;
 
-				return new Promise((resolve, reject) => {
-					recognition_endpoints.delete_multiple(url, key, image_ids)
-						.then((response) => {
-							resolve(response.data);
-						})
-						.catch((error) => {
-							reject(error);
-						});
-				});
-			},
+                return new Promise((resolve, reject) => {
+                    recognition_endpoints.delete_multiple(url, key, image_ids)
+                        .then((response) => {
+                            resolve(response.data);
+                        })
+                        .catch((error) => {
+                            reject(error);
+                        });
+                });
+            },
 
             /**
              * Delete image by subject
              * @param {String} subject 
              * @returns {Promise}
              */
-            delete_all_subject(subject){
+            delete_all_subject(subject) {
                 url = `${url}?subject=${subject}`;
 
                 return new Promise((resolve, reject) => {
@@ -208,7 +208,7 @@ class RecognitionService {
              * Delete all images in face collection
              * @returns {Promise}
              */
-            delete_all(){
+            delete_all() {
                 return new Promise((resolve, reject) => {
                     recognition_endpoints.delete_request(url, key)
                         .then(response => {
@@ -224,7 +224,7 @@ class RecognitionService {
         return faceCollectionFunctions;
     }
 
-    getSubjects(){
+    getSubjects() {
         const { get_full_url } = common_functions;
         const { list, add, rename, deleteSubject } = subject_endpoints;
 
@@ -237,7 +237,7 @@ class RecognitionService {
              * List the subjects
              * @returns {Promise}
              */
-            list(){
+            list() {
                 return new Promise((resolve, reject) => {
                     list(url, key)
                         .then(response => {
@@ -254,7 +254,7 @@ class RecognitionService {
              * @param {String} subject
              * @returns {Promise}
              */
-            add(subject){
+            add(subject) {
                 return new Promise((resolve, reject) => {
                     add(subject, url, key)
                         .then(response => {
@@ -272,7 +272,7 @@ class RecognitionService {
              * @param {String} newSubjectName
              * @returns {Promise}
              */
-            rename(presentSubjectName, newSubjectName ){
+            rename(presentSubjectName, newSubjectName) {
                 url = `${url}/${presentSubjectName}`
                 return new Promise((resolve, reject) => {
                     rename(newSubjectName, url, key)
@@ -290,7 +290,7 @@ class RecognitionService {
              * @param {String} subject
              * @returns {Promise}
              */
-            delete(subject){
+            delete(subject) {
                 url = `${url}/${subject}`
                 return new Promise((resolve, reject) => {
                     deleteSubject(url, key)
@@ -308,7 +308,7 @@ class RecognitionService {
              * @param {String} subject
              * @returns {Promise}
              */
-            deleteAll(){
+            deleteAll() {
                 return new Promise((resolve, reject) => {
                     deleteSubject(url, key)
                         .then(response => {
